# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  cost-service

  Coding challenge for a certain company

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Resources:
  # API Gateway config
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      # CORS to allow requests from frontend served by CloudFront
      Cors: 
        AllowHeaders: "'authorization'"
        AllowMethods: "'GET, POST, OPTIONS'"
        AllowOrigin: !Sub "'https://${CloudFrontDistribution.DomainName}'"
        AllowCredentials: true
      # All API requests must be authorized with Cognito
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        # Browsers send OPTIONS requests without Authorization header, so this next line excludes OPTIONS requests
        # from being authorized
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  # Lambda function to calculate cost for new merchants
  calculateCostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/rest/calculate-cost.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      # Don't retry failed attempts
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Policies:
        # Give Create/Read/Update/Delete Permissions to the CostsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CostsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          COSTS_TABLE: !Ref CostsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /costs/{industry}/{monthlyTransactions}/{monthlyVolume}
            Method: GET
            RestApiId: !Ref RestApi

  # This is a Lambda function config associated with the source code: generate-cost-file-upload-endpoint.js
  generateCostFileUploadEndpointFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/rest/generate-cost-file-upload-endpoint.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      # Don't retry failed attempts
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Policies:
        # Since this function is generating an upload url it needs the S3 write policy
        - S3WritePolicy:
            BucketName: !Ref CostFilesS3Bucket
      Environment:
        Variables:
          # Make bucket name accessible as environment variable from function code during execution
          COST_FILES_BUCKET: !Ref CostFilesS3Bucket
      Events:
        Api:
          Type: Api
          Properties:
            Path: /costs
            Method: POST
            RestApiId: !Ref RestApi

  # This is a Lambda function config associated with the source code: costs-file-uploaded.js
  costsFileUploadedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/s3/costs-file-uploaded.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      # Don't retry failed attempts
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Policies:
        # Commented out as it causes a circular dependency: lambda function depends on role depends on bucket depends on lambda function (because of the FileUploaded Event)
        # - S3ReadPolicy:
        #     BucketName: !Ref CostFilesS3Bucket
        # Give Create/Read/Update/Delete Permissions to the CostsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CostsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          COSTS_TABLE: !Ref CostsTable
      Events:
        FileUploaded:
          Type: S3
          Properties:
            Bucket: !Ref CostFilesS3Bucket
            Events: s3:ObjectCreated:*

  # This solves the circular dependency problem in the costsFileUploadedFunction policy
  CostsFileUploadedFunctionCanReadUploads:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: CostsFileUploadedFunctionCanReadUploads
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: 
              - !Sub "${CostFilesS3Bucket.Arn}/*"
      Roles:
        # This role is implicitly created by SAM
        - !Ref costsFileUploadedFunctionRole

  # This allows DynamoDbAdapter to recreate tables
  CostsFileUploadedFunctionCanRecreateDynamoDbTables:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: CostsFileUploadedFunctionCanRecreateDynamoDbTables
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:DeleteTable"
              - "dynamodb:CreateTable"
            Resource: 
              - !Sub "${CostsTable.Arn}"
      Roles:
        # This role is implicitly created by SAM
        - !Ref costsFileUploadedFunctionRole

  # DynamoDB table to store cost data
  CostsTable:
    Type: AWS::Serverless::SimpleTable
    # Properties:
      # Commented out as these properties are now defined in data-source-adapter.js
      # PrimaryKey:
      #   Name: industry
      #   Type: String
      # ProvisionedThroughput:
      #   ReadCapacityUnits: 2
      #   WriteCapacityUnits: 2

  # S3 bucket to store uploaded cost files
  CostFilesS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # CORS to allow CloudFront frontend to upload files
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - POST
            AllowedOrigins: 
              - !Sub "https://${CloudFrontDistribution.DomainName}"

  # Users (sales reps and admin users) are stored in this Cognito user pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref AWS::StackName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  # Cognito user pool client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref AWS::StackName
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub "https://${CloudFrontDistribution.DomainName}"
      LogoutURLs:
        - !Sub "https://${CloudFrontDistribution.DomainName}"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile

  # Cognito user pool domain
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AWS::StackName}-${AWS::AccountId}"
      UserPoolId: !Ref CognitoUserPool

  # Sales and admin groups used to authorize users
  CognitoSalesRepGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "External sales rep"
      GroupName: "sales_rep"
      UserPoolId: !Ref CognitoUserPool
  CognitoCostsAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Administrator who can set cost parameters"
      GroupName: "costs_admin"
      UserPoolId: !Ref CognitoUserPool

  # The S3 bucket stores the frontend code
  FrontendS3Bucket:
    Type: AWS::S3::Bucket

  # Restrict S3 bucket access to CloudFront only
  FrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Id: frontend-policy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Action: "s3:GetObject"
            Resource:
              - !Sub "arn:aws:s3:::${FrontendS3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  # Nested stack to deploy front end to S3 (see https://serverless.pub/deploy-frontend-to-s3-and-sar/)
  FrontendDeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.2

  # Defines the location of the frontend code to deploy to S3. Uses FrontendDeploymentLayer
  FrontendSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !GetAtt FrontendDeploymentLayer.Outputs.Arn
      CodeUri: src/ui/
      AutoPublishAlias: live
      Runtime: python3.6
      Handler: deployer.resource_handler
      Timeout: 180
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref FrontendS3Bucket

  # Triggers the upload of the frontend code to S3 during deployment. See FrontendDeploymentLayer and FrontendSource
  FrontendDeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt FrontendSource.Arn
      Version: !Ref "FrontendSource.Version"
      TargetBucket: !Ref FrontendS3Bucket
      Acl: "private"
      CacheControlMaxAge: 600
      Substitutions:
        FilePattern: "*.html"
        Values:
          DEPLOYMENT_COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
          DEPLOYMENT_COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          DEPLOYMENT_COGNITO_DOMAIN: !Sub "${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          DEPLOYMENT_FRONTEND_URL: !Sub "https://${CloudFrontDistribution.DomainName}"
          DEPLOYMENT_API_URL: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  # CloudFront origin access identity for allowing access to S3 frontend bucket
  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "S3 frontend OA"

  # CloudFront distribution for delivering S3 files over HTTPS
  # This is primarily required because S3 website hosting only does HTTP, not HTTPS
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: !Sub "${AWS::StackName} frontend stored in S3 is served by this CloudFront distribution"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        # List of origins that CloudFront will connect to
        Origins:
          - Id: s3-frontend
            DomainName: !GetAtt FrontendS3Bucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: "true"
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-frontend
          ViewerProtocolPolicy: redirect-to-https

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  FrontendS3Bucket:
    Description: "Frontend code is stored in this S3 bucket"
    Value: !Sub "https://${FrontendS3Bucket.DomainName}"
  CloudFrontFrontendUrl:
    Description: "Secure URL for frontend served by CloudFront"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  CognitoUserPoolId:
    Description: "Cognito user pool ID"
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: "Cognito user pool client ID"
    Value: !Ref CognitoUserPoolClient
  DynamoDbCostsTable:
    Description: "Name of the DynamoDB table used to store costs data"
    Value: !Ref CostsTable
  CostFilesS3Bucket:
    Description: "Uploaded cost files are stored in this S3 bucket"
    Value: !Sub "https://${CostFilesS3Bucket.DomainName}"
